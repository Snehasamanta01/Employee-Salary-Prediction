import pandas as pd
data=pd.read_csv(r"C:\Users\sneha\Downloads\adult 3.csv")
data	age	workclass	fnlwgt	education	educational-num	marital-status	occupation	relationship	race	gender	capital-gain	capital-loss	hours-per-week	native-country	income
0	25	Private	226802	11th	7	Never-married	Machine-op-inspct	Own-child	Black	Male	0	0	40	United-States	<=50K
1	38	Private	89814	HS-grad	9	Married-civ-spouse	Farming-fishing	Husband	White	Male	0	0	50	United-States	<=50K
2	28	Local-gov	336951	Assoc-acdm	12	Married-civ-spouse	Protective-serv	Husband	White	Male	0	0	40	United-States	>50K
3	44	Private	160323	Some-college	10	Married-civ-spouse	Machine-op-inspct	Husband	Black	Male	7688	0	40	United-States	>50K
4	18	?	103497	Some-college	10	Never-married	?	Own-child	White	Female	0	0	30	United-States	<=50K
...	...	...	...	...	...	...	...	...	...	...	...	...	...	...	...
48837	27	Private	257302	Assoc-acdm	12	Married-civ-spouse	Tech-support	Wife	White	Female	0	0	38	United-States	<=50K
48838	40	Private	154374	HS-grad	9	Married-civ-spouse	Machine-op-inspct	Husband	White	Male	0	0	40	United-States	>50K
48839	58	Private	151910	HS-grad	9	Widowed	Adm-clerical	Unmarried	White	Female	0	0	40	United-States	<=50K
48840	22	Private	201490	HS-grad	9	Never-married	Adm-clerical	Own-child	White	Male	0	0	20	United-States	<=50K
48841	52	Self-emp-inc	287927	HS-grad	9	Married-civ-spouse	Exec-managerial	Wife	White	Female	15024	0	40	United-States	>50K
48842 rows × 15 columns
data.shape
  (48842, 15)
  data.head()
  	age	workclass	fnlwgt	education	educational-num	marital-status	occupation	relationship	race	gender	capital-gain	capital-loss	hours-per-week	native-country	income
0	25	Private	226802	11th	7	Never-married	Machine-op-inspct	Own-child	Black	Male	0	0	40	United-States	<=50K
1	38	Private	89814	HS-grad	9	Married-civ-spouse	Farming-fishing	Husband	White	Male	0	0	50	United-States	<=50K
2	28	Local-gov	336951	Assoc-acdm	12	Married-civ-spouse	Protective-serv	Husband	White	Male	0	0	40	United-States	>50K
3	44	Private	160323	Some-college	10	Married-civ-spouse	Machine-op-inspct	Husband	Black	Male	7688	0	40	United-States	>50K
4	18	?	103497	Some-college	10	Never-married	?	Own-child	White	Female	0	0	30	United-States	<=50K
data.tail()
  	age	workclass	fnlwgt	education	educational-num	marital-status	occupation	relationship	race	gender	capital-gain	capital-loss	hours-per-week	native-country	income
48837	27	Private	257302	Assoc-acdm	12	Married-civ-spouse	Tech-support	Wife	White	Female	0	0	38	United-States	<=50K
48838	40	Private	154374	HS-grad	9	Married-civ-spouse	Machine-op-inspct	Husband	White	Male	0	0	40	United-States	>50K
48839	58	Private	151910	HS-grad	9	Widowed	Adm-clerical	Unmarried	White	Female	0	0	40	United-States	<=50K
48840	22	Private	201490	HS-grad	9	Never-married	Adm-clerical	Own-child	White	Male	0	0	20	United-States	<=50K
48841	52	Self-emp-inc	287927	HS-grad	9	Married-civ-spouse	Exec-managerial	Wife	White	Female	15024	0	40	United-States	>50K
#null values 
data.isna()
  age	workclass	fnlwgt	education	educational-num	marital-status	occupation	relationship	race	gender	capital-gain	capital-loss	hours-per-week	native-country	income
0	False	False	False	False	False	False	False	False	False	False	False	False	False	False	False
1	False	False	False	False	False	False	False	False	False	False	False	False	False	False	False
2	False	False	False	False	False	False	False	False	False	False	False	False	False	False	False
3	False	False	False	False	False	False	False	False	False	False	False	False	False	False	False
4	False	False	False	False	False	False	False	False	False	False	False	False	False	False	False
...	...	...	...	...	...	...	...	...	...	...	...	...	...	...	...
48837	False	False	False	False	False	False	False	False	False	False	False	False	False	False	False
48838	False	False	False	False	False	False	False	False	False	False	False	False	False	False	False
48839	False	False	False	False	False	False	False	False	False	False	False	False	False	False	False
48840	False	False	False	False	False	False	False	False	False	False	False	False	False	False	False
48841	False	False	False	False	False	False	False	False	False	False	False	False	False	False	False
48842 rows × 15 columns
  
data.isna().sum()
  age                0
workclass          0
fnlwgt             0
education          0
educational-num    0
marital-status     0
occupation         0
relationship       0
race               0
gender             0
capital-gain       0
capital-loss       0
hours-per-week     0
native-country     0
income             0
dtype: int64
  print(data.occupation.value_counts())
  occupation
Prof-specialty       6172
Craft-repair         6112
Exec-managerial      6086
Adm-clerical         5611
Sales                5504
Other-service        4923
Machine-op-inspct    3022
?                    2809
Transport-moving     2355
Handlers-cleaners    2072
Farming-fishing      1490
Tech-support         1446
Protective-serv       983
Priv-house-serv       242
Armed-Forces           15
Name: count, dtype: int64
print(data.gender.value_counts())
gender
Male      32650
Female    16192
Name: count, dtype: int64
print(data['marital-status'].value_counts())
marital-status
Married-civ-spouse       22379
Never-married            16117
Divorced                  6633
Separated                 1530
Widowed                   1518
Married-spouse-absent      628
Married-AF-spouse           37
Name: count, dtype: int64
print(data['education'].value_counts())
education
HS-grad         15784
Some-college    10878
Bachelors        8025
Masters          2657
Assoc-voc        2061
11th             1812
Assoc-acdm       1601
10th             1389
7th-8th           955
Prof-school       834
9th               756
12th              657
Doctorate         594
5th-6th           509
1st-4th           247
Preschool          83
Name: count, dtype: int64
print(data['workclass'].value_counts())
workclass
Private             33906
Self-emp-not-inc     3862
Local-gov            3136
?                    2799
State-gov            1981
Self-emp-inc         1695
Federal-gov          1432
Without-pay            21
Never-worked           10
Name: count, dtype: int64
print(data['marital-status'].value_counts())
marital-status
Married-civ-spouse       21970
Never-married            15933
Divorced                  6585
Separated                 1487
Widowed                   1471
Married-spouse-absent      582
Married-AF-spouse           37
Name: count, dtype: int64
data=data[data['workclass']!= 'Without-pay']
data=data[data['workclass']!= 'Never worked']
  data=data[data['education']!= '5th-6th']
data=data[data['education']!= '1st-4th']
data=data[data['education']!= 'preschool']
  data.drop(columns=['education'],inplace=True)
  #outlier
import matplotlib.pyplot as plt
plt.boxplot(data['age'])
plt.show()
  data=data[(data['age']<=75)& (data['age']>=17)]
  plt.boxplot(data['age'])
plt.show()
  #label encoding
from sklearn.preprocessing import LabelEncoder
encoder = LabelEncoder()
data['workclass']= encoder.fit_transform(data['workclass'])
data['marital-status']= encoder.fit_transform(data['marital-status'])
data['occupation']= encoder.fit_transform(data['occupation'])
data['relationship']= encoder.fit_transform(data['relationship'])
data['race']= encoder.fit_transform(data['race'])
data['gender']= encoder.fit_transform(data['gender'])
data['native-country']= encoder.fit_transform(data['native-country'])
data
	age	workclass	fnlwgt	educational-num	marital-status	occupation	relationship	race	gender	capital-gain	capital-loss	hours-per-week	native-country	income
0	25	4	226802	7	4	6	3	2	1	0	0	40	39	<=50K
1	38	4	89814	9	2	4	0	4	1	0	0	50	39	<=50K
2	28	1	336951	12	2	10	0	4	1	0	0	40	39	>50K
3	44	4	160323	10	2	6	0	2	1	7688	0	40	39	>50K
4	18	3	103497	10	4	14	3	4	0	0	0	30	39	<=50K
...	...	...	...	...	...	...	...	...	...	...	...	...	...	...
48837	27	4	257302	12	2	12	5	4	0	0	0	38	39	<=50K
48838	40	4	154374	9	2	6	0	4	1	0	0	40	39	>50K
48839	58	4	151910	9	6	0	4	4	0	0	0	40	39	<=50K
48840	22	4	201490	9	4	0	3	4	1	0	0	20	39	<=50K
48841	52	5	287927	9	2	3	5	4	0	15024	0	40	39	>50K
47711 rows × 14 columns
x=data.drop(columns=['income'])
y=data['income']
x
age	workclass	fnlwgt	educational-num	marital-status	occupation	relationship	race	gender	capital-gain	capital-loss	hours-per-week	native-country
0	25	4	226802	7	4	6	3	2	1	0	0	40	39
1	38	4	89814	9	2	4	0	4	1	0	0	50	39
2	28	1	336951	12	2	10	0	4	1	0	0	40	39
3	44	4	160323	10	2	6	0	2	1	7688	0	40	39
4	18	3	103497	10	4	14	3	4	0	0	0	30	39
...	...	...	...	...	...	...	...	...	...	...	...	...	...
48837	27	4	257302	12	2	12	5	4	0	0	0	38	39
48838	40	4	154374	9	2	6	0	4	1	0	0	40	39
48839	58	4	151910	9	6	0	4	4	0	0	0	40	39
48840	22	4	201490	9	4	0	3	4	1	0	0	20	39
48841	52	5	287927	9	2	3	5	4	0	15024	0	40	39
47711 rows × 13 columns
y
0        <=50K
1        <=50K
2         >50K
3         >50K
4        <=50K
         ...  
48837    <=50K
48838     >50K
48839    <=50K
48840    <=50K
48841     >50K
Name: income, Length: 47711, dtype: object

from sklearn.preprocessing import MinMaxScaler
scaler = MinMaxScaler()
x=scaler.fit_transform(x)
x
x
array([[0.13793103, 0.57142857, 0.14512876, ..., 0.        , 0.39795918,
        0.95121951],
       [0.36206897, 0.57142857, 0.05245126, ..., 0.        , 0.5       ,
        0.95121951],
       [0.18965517, 0.14285714, 0.21964867, ..., 0.        , 0.39795918,
        0.95121951],
       ...,
       [0.70689655, 0.57142857, 0.09446153, ..., 0.        , 0.39795918,
        0.95121951],
       [0.0862069 , 0.57142857, 0.12800425, ..., 0.        , 0.19387755,
        0.95121951],
       [0.60344828, 0.71428571, 0.18648211, ..., 0.        , 0.39795918,
        0.95121951]])
  array([[0.13793103, 0.57142857, 0.14512876, ..., 0.        , 0.39795918,
        0.95121951],
       [0.36206897, 0.57142857, 0.05245126, ..., 0.        , 0.5       ,
        0.95121951],
       [0.18965517, 0.14285714, 0.21964867, ..., 0.        , 0.39795918,
        0.95121951],
       ...,
       [0.70689655, 0.57142857, 0.09446153, ..., 0.        , 0.39795918,
        0.95121951],
       [0.0862069 , 0.57142857, 0.12800425, ..., 0.        , 0.19387755,
        0.95121951],
       [0.60344828, 0.71428571, 0.18648211, ..., 0.        , 0.39795918,
        0.95121951]])
rom sklearn.model_selection import train_test_split
xtrain,xtest,ytrain,ytest=train_test_split(x,y,test_size=0.2,random_state=23,stratify=y)
xtrain
array([[0.5862069 , 0.57142857, 0.23385461, ..., 0.        , 0.15306122,
        0.95121951],
       [0.43103448, 0.57142857, 0.06810769, ..., 0.        , 0.39795918,
        0.95121951],
       [0.74137931, 0.57142857, 0.02638834, ..., 0.        , 0.39795918,
        0.95121951],
       ...,
       [0.0862069 , 0.14285714, 0.21243137, ..., 0.        , 0.19387755,
        0.95121951],
       [0.18965517, 0.57142857, 0.04021879, ..., 0.        , 0.14285714,
        0.95121951],
       [0.60344828, 0.57142857, 0.11103602, ..., 0.        , 0.39795918,
        0.95121951]])
from sklearn.pipeline import Pipeline
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score,classification_report
from sklearn.linear_model import LogisticRegression
from sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifier
from sklearn.neighbors import KNneighborsClassifier
from sklearn.svm import SVC
from sklearn.preprocessing import StandardScaler , OneHotEncoder

x_train,x_test,y_train,y_test=train_test_split(x,y, test_size=0.2 , random_state=42)
models={
    "LogisticRegression":LogisticRegression(),
    "RandomForest":RandomForestClassifier(),
    "KNN":KNeighborsClassifier(),
    "SVM":SVC(),
    "GradientBoosting":GradientBoostingClassifier()
}
results={}
for name, model in models.items():
    pipe=pipeline([('Scaler' , StandardScaler()),('model' , model)])
    pipe.fit(x_train,y_train)
    y_pred=pipe.predict(x_test)
    acc = accuracy_score(y_test,y_pred)
    results[name]=acc
    print(f"{name} Accuracy:{acc:.4f}")
    print(classification_report(y_test,y_pred))
# machine learning algorithm
from sklearn.neighbors import KNeighborsClassifier
knn = KNeighborsClassifier()
knn.fit(xtrain,ytrain)#input and output training data
predict=knn.predict(xtest)          
predict
array(['<=50K', '<=50K', '<=50K', ..., '<=50K', '>50K', '<=50K'],
      dtype=object)
from sklearn.metrics import accuracy_score
accuracy_score(ytest,predict)
0.8240595200670648
from sklearn.metrics import accuracy_score
accuracy_score(ytest,predict)
0.8240595200670648

# machine learning algorithm
from sklearn.linear_model import LogisticRegression
lr=LogisticRegression()
lr.fit(xtrain,ytrain)#input and output training data
predictl=lr.predict(xtest)          
predictl
array(['<=50K', '<=50K', '<=50K', ..., '<=50K', '>50K', '<=50K'],
      dtype=object)
# machine learning algorithm
from sklearn.neural_network import MLPClassifier
clf=MLPClassifier(solver ='adam',hidden_layer_sizes=(5,2),random_state=2,max_iter=2000)
clf.fit(xtrain,ytrain)#input and output training data
predict2=lr.predict(xtest)          
predict2
array(['<=50K', '<=50K', '<=50K', ..., '<=50K', '>50K', '<=50K'],
      dtype=object)
from sklearn.metrics import accuracy_score
accuracy_score(ytest,predict2)
0.8219637430577387


